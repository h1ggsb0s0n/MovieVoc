@page "/movie/create"
@inject NavigationManager navigationManager
@inject MovieRepository movieRepository
@inject IMatToaster Toaster
@using System;
@using System.IO;

<h3>CreateMovie</h3>

<EditForm Model="Movie" OnValidSubmit="saveMovie">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Titel:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Movie.Title" />
            <ValidationMessage For="@(() => Movie.Title)" />
        </div>
    </div>

    <div>
        <label>Zusammenfassung:</label>
        <textarea class="form-control" @bind="Movie.Summary" rows="4" cols="50"></textarea>

        <ValidationMessage For="@(() => Movie.Summary)" />

    </div>

    <div class="form-group">
        <label>Veröffentlichungsdatum:</label>
        <div>
            <InputDate type="date" class="form-control" @bind-Value="@Movie.ReleaseDate" />
            <ValidationMessage For="@(() => Movie.ReleaseDate)" />
        </div>
    </div>
    <div class="form-group">
        <label>Poster:</label>
        <div>
            <MatFileUpload OnChange="@FilesReadyForContent" Label="Laden Sie ein Bild des Filmes hoch"></MatFileUpload>
            <ValidationMessage For="@(() => Movie.Poster)" />
        </div>
    </div>
    <div>
        <img src="data:image/jpeg;base64, @Movie.Poster" style="height: 300px;" />
    </div>
    <MatButton type="submit" Raised="true">Film in der Datenbank speichern</MatButton>
</EditForm>

@code {

    private MovieDTO Movie = new MovieDTO();

    private async Task saveMovie()
    {
        var response = await movieRepository.CreateMovie(Movie);

        if (response.Success)
        {
            Toaster.Add($"Der Film wurde erfolgreich zugefügt", MatToastType.Success, null, null);
            //reset
            this.Movie = new MovieDTO();
        }
        else
        {
            string errormsg = await response.GetBody();
            Toaster.Add($"Error: {errormsg}", MatToastType.Danger, null, null);
        }

    }

    /// <summary>
    /// Teil des Codes von MarBlazor genommen, musste jedoch vereinfacht werden.
    /// Todo: Errorhandling
    /// </summary>
    /// <param name="files"></param>
    /// <returns></returns>
    async Task FilesReadyForContent(IMatFileUploadEntry[] files)
    {
        try
        {
            var file = files.FirstOrDefault();
            if (file == null)
            {
                return;
            }

            using (var stream = new MemoryStream())
            {
                await file.WriteToStreamAsync(stream);
                Movie.Poster = Convert.ToBase64String(stream.ToArray());
            }
        }

        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }
}
@page "/vocabulary/add"
@inject MovieRepository movieRepository
@inject VocabularyRepository vocRepository
 
@using MovieVoc.Client.Pages.Word
@using MovieVoc.Client.Pages.Movie

<h3>Wörter einem Film zufügen hinzufügen:</h3>
<div>
    <label>Film suchen:</label>
    <SearchMoviesTypeahead getMovie="getSelectedMovie"></SearchMoviesTypeahead>

    @if (SelectedMovie != null)
    {
        <h3>@SelectedMovie.Title</h3>
        <p>@SelectedMovie.Summary</p>
    }
</div>
<div>
    <label>Wort suchen:</label>
    <SearchWordTypeahead getWord="addWordToSelectedWords"></SearchWordTypeahead>
    <WordSelector SelectedWords="SeletedWords"></WordSelector>
</div>

@if (SelectedMovie != null && SeletedWords.Any())
{
    <button class="btn btn-primary" @onclick="addWordsToMovie">Alle Selektierten Wörter der Datenbank zufügen</button>
}




@code {

    public MovieDTO SelectedMovie { get; set; }

    public List<WordDTO> SeletedWords { get; set; } = new List<WordDTO>();



    private async void getSelectedMovie(int id)
    {
        this.SelectedMovie = await movieRepository.GetMovie(id);
        StateHasChanged();
    }

    private void addWordToSelectedWords(WordDTO word)
    {
        if (!SeletedWords.Any(x => x.Equals(word)))
        {
            SeletedWords.Add(word);
            StateHasChanged();
        }

    }


    private async void addWordsToMovie()
    {
        VocabularyDTO vocDTO = new VocabularyDTO();
        vocDTO.MovieId = SelectedMovie.Id;
        vocDTO.ListOfWords = SeletedWords;
        await vocRepository.AddVocabularyToMovie(vocDTO);
    }


}
